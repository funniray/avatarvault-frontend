[{"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\AppHeader\\AppHeader.js":"1","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\index.js":"2","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Index\\Index.js":"3","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Search\\Search.js":"4","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\App.js":"5","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\Rest.js":"6","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\components\\TagSearchBar.js":"7","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\components\\CategorySelector.js":"8","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Upload\\Upload.js":"9","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Upload\\UploadInfoPanel.js":"10","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Upload\\UploadingPanel.js":"11","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\components\\Sidebar.js":"12"},{"size":79,"mtime":1608400190850,"results":"13","hashOfConfig":"14"},{"size":500,"mtime":1607788421137,"results":"15","hashOfConfig":"14"},{"size":174,"mtime":1608477430747,"results":"16","hashOfConfig":"14"},{"size":5419,"mtime":1608586970546,"results":"17","hashOfConfig":"14"},{"size":1568,"mtime":1608477330498,"results":"18","hashOfConfig":"14"},{"size":1155,"mtime":1608500810952,"results":"19","hashOfConfig":"14"},{"size":975,"mtime":1608446788125,"results":"20","hashOfConfig":"14"},{"size":714,"mtime":1608446635132,"results":"21","hashOfConfig":"14"},{"size":3617,"mtime":1608682107851,"results":"22","hashOfConfig":"14"},{"size":7485,"mtime":1608682378491,"results":"23","hashOfConfig":"14"},{"size":1167,"mtime":1608485741621,"results":"24","hashOfConfig":"14"},{"size":2786,"mtime":1608513892727,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8x23y9",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\AppHeader\\AppHeader.js",[],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\index.js",[],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Index\\Index.js",[],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Search\\Search.js",["51"],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\App.js",["52"],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\Rest.js",["53","54","55"],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\components\\TagSearchBar.js",["56"],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\components\\CategorySelector.js",[],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Upload\\Upload.js",[],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Upload\\UploadInfoPanel.js",["57","58"],"import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport CategorySelector from \"../../components/CategorySelector\";\r\nimport TagSearchBar from \"../../components/TagSearchBar\";\r\nimport React, {Suspense, useRef, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Button, Grid, Paper} from \"@material-ui/core\";\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport axios from 'axios';\r\nimport {baseurl} from \"../../Rest\";\r\n\r\nlet queue = [];\r\nlet isQueueRunning = false;\r\n\r\nlet fileTypes = {\r\n    files: ['rar','zip','7z','unitypackage','exe','gz','vrca','shader','msi'],\r\n    previews: ['png','jpg','jpeg','gif']\r\n}\r\n\r\nconst useStyles = makeStyles((theme) =>{\r\n    //Why didn't they just use a palette thing?\r\n    const borderColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';\r\n    return{\r\n        dropZone: {\r\n            width: '50%',\r\n            height: '150px',\r\n            marginTop:'10px',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto'\r\n        },\r\n        border: {\r\n            border: \"1px solid \"+borderColor\r\n        }\r\n    }\r\n});\r\n\r\nfunction dropHandler(e,currentFiles) {\r\n    console.log('got files')\r\n    e.preventDefault();\r\n\r\n    let files = [...currentFiles]\r\n\r\n    if (e.dataTransfer.items) {\r\n        for (let item of e.dataTransfer.items) {\r\n            if (item.kind === 'file') {\r\n                files.push(item.getAsFile());\r\n            }\r\n        }\r\n    } else {\r\n        e.dataTransfer.files.forEach(item=>files.push(item));\r\n    }\r\n\r\n    return files;\r\n}\r\n\r\nfunction sortFiles(files) {\r\n    let sorted = {};\r\n\r\n    files = files.filter(file=>{\r\n        let split = file.name.split('.');\r\n        if (fileTypes.files.includes(split[split.length-1].toLowerCase())){\r\n            split.pop();\r\n            sorted[split.join(\".\")] = {file: file};\r\n            if (file.size > 1000000000){\r\n                sorted[split.join(\".\")].exception = \"Size is over 1GB!\"\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    });\r\n\r\n    files = files.filter(file=>{\r\n        let split = file.name.split('.');\r\n        if (fileTypes.previews.includes(split[split.length-1].toLowerCase())){\r\n            split.pop();\r\n            if (!sorted[split.join(\".\")]) return true;\r\n            sorted[split.join(\".\")].preview = file;\r\n            return false;\r\n        }\r\n        return true;\r\n    });\r\n\r\n    return [sorted,files];\r\n}\r\n\r\nclass ObjectUpload {\r\n    formData;\r\n    listeners = [];\r\n    finishedListener=[];\r\n    upload;\r\n    name;\r\n    finished = false;\r\n    downloading = false;\r\n    progress = 0;\r\n\r\n    constructor(file,preview,tags,category,password) {\r\n        this.name=file.name;\r\n        this.formData = new FormData();\r\n        this.formData.append('file',file);\r\n        this.formData.append('tags',JSON.stringify(tags));\r\n        this.formData.append('category',category);\r\n        this.formData.append('password',password)\r\n        if (preview) this.formData.append('preview',preview);\r\n    }\r\n\r\n    addEventListener(listener) {\r\n        listener({loaded:this.progress,total:100});\r\n        this.listeners.push(listener);\r\n    }\r\n\r\n    addFinishedListener(listener) {\r\n        this.finishedListener.push(listener)\r\n    }\r\n\r\n    callListeners(e){\r\n        this.progress = Math.round((100 * e.loaded) / e.total);\r\n        this.listeners.forEach((l)=>l(e))\r\n    }\r\n\r\n    uploadFile() {\r\n        this.downloading = true;\r\n        let a = axios.create({baseURL:baseurl});\r\n        this.upload = a.post(`/v1/upload`,this.formData, {headers:{\"Content-Type\": \"multipart/form-data\"}, onUploadProgress: (e)=> this.callListeners(e)});\r\n        this.upload.then(this.finishedListener.forEach(l=>l()));\r\n        return this.upload;\r\n    }\r\n}\r\n\r\nfunction upload(c,t,files,p) {\r\n    return new ObjectUpload(files.file,files.preview,t,c,p)\r\n}\r\n\r\nfunction uploadAll(files,c,t,uploading,setFiles,p) {\r\n    for (let fileName in files) {\r\n        let file = files[fileName];\r\n        const u = upload(c,t,file,p);\r\n        uploading.push(u);\r\n        queue.push(u);\r\n    }\r\n    setFiles(uploading);\r\n\r\n    if (!isQueueRunning) {\r\n        isQueueRunning = true;\r\n        for (let i=0;i<3;i++) {\r\n            doNextInQueue();\r\n        }\r\n    }\r\n}\r\n\r\nasync function doNextInQueue() {\r\n    if (!queue[0]) {\r\n        isQueueRunning = false;\r\n        console.log(queue);\r\n        return;\r\n    }\r\n    let file = queue[0];\r\n    queue.shift();\r\n    await file.uploadFile();\r\n    await doNextInQueue();\r\n}\r\n\r\nconst gridColumns =[\r\n    {field:'fileName',headerName: 'File Name',width: 150,valueGetter:(props=>props.row.file.name)},\r\n    {field:'previewName',headerName: 'Preview Name',width: 150,valueGetter:(props=>(props.row.preview || {name:\"No Preview\"}).name)},\r\n    {field:'exception',headerName: 'Exceptions',width: 300},\r\n];\r\n\r\nexport default function UploadInfoPanel(props) {\r\n    let [category,setCategory] = useState('avatars');\r\n    let [tags, setTags] = useState([]);\r\n    let [files,setFiles] = useState([]);\r\n    let [sorted, unsorted] = sortFiles(files);\r\n    let [selected,setSelected] = useState([]);\r\n    let catRef = useRef()\r\n    const classes = useStyles();\r\n\r\n    let exceptions;\r\n    let grid = [];\r\n\r\n    if (unsorted.length > 0) {\r\n        exceptions = <div><p>Some files have exceptions!</p>{unsorted.map(f=><p key={f.name}>{f.name}</p>)}</div>\r\n    } else {\r\n        exceptions = <></>\r\n    }\r\n\r\n    for (let sort in sorted) {\r\n        sorted[sort].id = sort;\r\n        grid.push(sorted[sort]);\r\n    }\r\n\r\n    return (\r\n        <Suspense fallback={<CircularProgress/>}>\r\n            <Grid container spacing={2} style={{width:'100%', padding: 10}}>\r\n                <Grid item container xs={2}>\r\n                    <CategorySelector style={{width:'100%'}} ref={catRef} onChange={(e,v)=>setCategory(v)} freeSolo/>\r\n                </Grid>\r\n                <Grid item xs={10}>\r\n                    <TagSearchBar style={{width:'100%'}} value={tags} freeSolo onChange={(e,v)=>{setTags(v)}}/>\r\n                </Grid>\r\n            </Grid>\r\n            <p>Drop files below to upload.</p>\r\n            <div onDragOver={e=>{e.stopPropagation();e.preventDefault()}} onDrop={e=>{setFiles(dropHandler(e,files))}}>\r\n                {exceptions}\r\n                <Grid direction={\"column\"} container>\r\n                    <Grid item container style={{minHeight:500, width: '100%', margin:10 }}>\r\n                        <DataGrid rows={grid} columns={gridColumns} checkboxSelection onSelectionChange={e=>setSelected(e.rowIds)} />\r\n                    </Grid>\r\n                    <Grid item container spacing={2} style={{width:\"100%\", margin:10}}>\r\n                        <Grid item container xs justify={\"flex-start\"}>\r\n                            <Button color={\"secondary\"} variant={\"outlined\"} onClick={()=>setFiles([])}>Clear</Button>\r\n                        </Grid>\r\n                        <Grid item container xs justify={\"flex-end\"}>\r\n                            <Button color={\"primary\"} variant={\"outlined\"} onClick={()=>{\r\n                                let toUpload = selected.map(i=>sorted[i]);\r\n                                uploadAll(toUpload,category,tags,props.files,props.setUploadingFiles,props.password)\r\n                            }}>Upload Selected Files</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Suspense>)\r\n}","C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\routes\\Upload\\UploadingPanel.js",[],"C:\\Users\\funni\\WebstormProjects\\avatarvault-frontend\\src\\components\\Sidebar.js",[],{"ruleId":"59","severity":1,"message":"60","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":20},{"ruleId":"59","severity":1,"message":"63","line":5,"column":8,"nodeType":"61","messageId":"62","endLine":5,"endColumn":17},{"ruleId":"59","severity":1,"message":"64","line":32,"column":10,"nodeType":"61","messageId":"62","endLine":32,"endColumn":15},{"ruleId":"59","severity":1,"message":"65","line":36,"column":10,"nodeType":"61","messageId":"62","endLine":36,"endColumn":18},{"ruleId":"66","severity":1,"message":"67","line":40,"column":1,"nodeType":"68","endLine":40,"endColumn":81},{"ruleId":"59","severity":1,"message":"69","line":3,"column":23,"nodeType":"61","messageId":"62","endLine":3,"endColumn":42},{"ruleId":"59","severity":1,"message":"70","line":6,"column":23,"nodeType":"61","messageId":"62","endLine":6,"endColumn":28},{"ruleId":"59","severity":1,"message":"71","line":174,"column":11,"nodeType":"61","messageId":"62","endLine":174,"endColumn":18},"no-unused-vars","'memoizeOne' is defined but never used.","Identifier","unusedVar","'AppHeader' is defined but never used.","'login' is defined but never used.","'register' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'createFilterOptions' is defined but never used.","'Paper' is defined but never used.","'classes' is assigned a value but never used."]